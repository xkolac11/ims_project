//
// errors.h
//
//
//
//
/* Generated from file 'errors.txt' by program GENERR */

enum _ErrEnum {
/* 0 */ Copyright,
/* 1 */ UnknownError,
/* 2 */ InternalError,
/* 3 */ MemoryError,
/* 4 */ InitError,
/* 5 */ TwiceInitError,
/* 6 */ InitInRunError,
/* 7 */ RunUseError,
/* 8 */ SetStepError,
/* 9 */ InitMinStepError,
/* 10 */ SetStepError2,
/* 11 */ SetAccuracyError,
/* 12 */ SFunctionUseError,
/* 13 */ AccuracyError,
/* 14 */ LinkRefError,
/* 15 */ LinkDelError,
/* 16 */ LinkOutError,
/* 17 */ DuplicateCalendar,
/* 18 */ DeletingActive,
/* 19 */ SchedulingBeforeTime,
/* 20 */ EmptyCalendar,
/* 21 */ ProcessRefError,
/* 22 */ ProcessNotInitialized,
/* 23 */ HistoRefError,
/* 24 */ HistoStepError,
/* 25 */ HistoCountError,
/* 26 */ ListRefError,
/* 27 */ ListActivityError,
/* 28 */ ListEmptyError,
/* 29 */ QueueRefError,
/* 30 */ EmptyWUListError,
/* 31 */ GraphRefError,
/* 32 */ EntityRefError,
/* 33 */ EntityIsNotScheduled,
/* 34 */ StatRefError,
/* 35 */ TStatRefError,
/* 36 */ TStatNotInitialized,
/* 37 */ CantCreateIntg,
/* 38 */ CantDestroyIntg,
/* 39 */ CantCreateStatus,
/* 40 */ CantDestroyStatus,
/* 41 */ FacilityRefError,
/* 42 */ FacInterruptError,
/* 43 */ ReleaseError,
/* 44 */ ReleaseNotSeized,
/* 45 */ StoreRefError,
/* 46 */ EnterCapError,
/* 47 */ LeaveManyError,
/* 48 */ SetCapacityError,
/* 49 */ SetQueueError,
/* 50 */ WeibullError,
/* 51 */ ErlangError,
/* 52 */ NegBinError,
/* 53 */ NegBinMError1,
/* 54 */ NegBinMError2,
/* 55 */ PoissonError,
/* 56 */ GeomError,
/* 57 */ HyperGeomError1,
/* 58 */ HyperGeomError2,
/* 59 */ OutFilePutError,
/* 60 */ OutFileOpenError,
/* 61 */ CantOpenOutFile,
/* 62 */ CantCloseOutFile,
/* 63 */ AlgLoopDetected,
/* 64 */ LowGreaterHigh,
/* 65 */ BadQntzrStep,
/* 66 */ InconsistentHeader,
/* 67 */ SemaphoreError,
/* 68 */ BadUniformParam,
/* 69 */ StatNoRecError,
/* 70 */ StatDispError,
/* 71 */ AL_BadBounds,
/* 72 */ AL_BadInitVal,
/* 73 */ AL_Diverg,
/* 74 */ AL_MaxCount,
/* 75 */ AL_NotInLoop,
/* 76 */ NI_UnknownMeth,
/* 77 */ NI_MultDefMeth,
/* 78 */ NI_IlStepSize,
/* 79 */ NI_NotSingleStep,
/* 80 */ NI_NotMultiStep,
/* 81 */ NI_CantSetMethod,
/* 82 */ NI_CantSetStarter,
/* 83 */ RlineErr1,
/* 84 */ RlineErr2,
/* 85 */ NoDebugErr,
/* 86 */ DelayTimeErr,
/* 87 */ ParameterChangeErr,
/* 88 */ UserError,
};

extern char *_ErrMsg(enum _ErrEnum N);

